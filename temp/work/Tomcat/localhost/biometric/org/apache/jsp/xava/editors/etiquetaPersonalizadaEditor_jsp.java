/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-11 05:20:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.xava.editors;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.openxava.model.meta.MetaProperty;
import org.openxava.controller.ModuleContext;
import org.openxava.view.View;
import com.sta.biometric.anotaciones.EtiquetaPersonalizada;
import java.lang.reflect.Field;
import org.openxava.util.Is;

public final class etiquetaPersonalizadaEditor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/xava/imports.jsp", Long.valueOf(1742600918000L));
    _jspx_dependants.put("jar:file:/C:/Users/user/git/biometric/target/biometric/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt-1_0.tld", Long.valueOf(1153395882000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1736364948305L));
    _jspx_dependants.put("jar:file:/C:/Users/user/git/biometric/target/biometric/WEB-INF/lib/jstl-1.2.jar!/META-INF/c-1_0.tld", Long.valueOf(1153395882000L));
    _jspx_dependants.put("/WEB-INF/openxava.tld", Long.valueOf(1742600916000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("org.openxava.model.meta.MetaProperty");
    _jspx_imports_classes.add("org.openxava.controller.ModuleContext");
    _jspx_imports_classes.add("org.openxava.view.View");
    _jspx_imports_classes.add("com.sta.biometric.anotaciones.EtiquetaPersonalizada");
    _jspx_imports_classes.add("java.lang.reflect.Field");
    _jspx_imports_classes.add("org.openxava.util.Is");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.openxava.controller.ModuleContext context = null;
      synchronized (session) {
        context = (org.openxava.controller.ModuleContext) _jspx_page_context.getAttribute("context", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (context == null){
          context = new org.openxava.controller.ModuleContext();
          _jspx_page_context.setAttribute("context", context, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("\r\n");

    String viewObject = request.getParameter("viewObject");
    viewObject = (viewObject == null || viewObject.equals("")) ? "xava_view" : viewObject;
    View view = (View) context.get(request, viewObject);

    String propertyKey = request.getParameter("propertyKey");
    MetaProperty p = (MetaProperty) request.getAttribute(propertyKey);
    String valor = (String) request.getAttribute(propertyKey + ".fvalue");

    // Obtener los valores desde la anotaci√≥n personalizada
    EtiquetaPersonalizada config = null;
    try {
        if (p != null && p.getMetaModel() != null && p.getMetaModel().getPropertiesClass() != null) {
            Field field = p.getMetaModel().getPropertiesClass().getDeclaredField(p.getName());
            config = field.getAnnotation(EtiquetaPersonalizada.class);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }

    String icono = config != null ? config.icon() : "";
    String color = config != null && !Is.emptyString(config.color()) ? config.color() : "#000";
    String fontSize = config != null && !Is.emptyString(config.fontSize()) ? config.fontSize() : "1rem";
    boolean bold = config != null && config.bold();
    boolean marco = config != null && config.conMarco();

    String estilo = "font-size:" + fontSize + "; color:" + color + ";";
    estilo += bold ? " font-weight:bold;" : " font-weight:normal;";

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"etiqueta-personalizada ");
      out.print( marco ? "con-marco" : "" );
      out.write("\" style=\"");
      out.print( estilo );
      out.write("\">\r\n");
      out.write("    ");
 if (!Is.emptyString(icono)) { 
      out.write("\r\n");
      out.write("        <i class=\"mdi mdi-");
      out.print( icono );
      out.write("\"></i>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("    <span>");
      out.print( valor );
      out.write("</span>\r\n");
      out.write("</div>\r\n");
      out.write("<input type=\"hidden\" name=\"");
      out.print( propertyKey );
      out.write("\" value=\"");
      out.print( valor );
      out.write("\">\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
